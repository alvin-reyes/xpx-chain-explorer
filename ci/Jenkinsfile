pipeline {
  agent {
    node {
      label 'docker-t3a-small'
    }
  }

  environment {
    npm_config_cache = "npm-cache"
  }

  options {
    timestamps()
  }

  stages {
    stage('Build') {
      steps {
        echo 'Starting Docker Container'
        withDockerContainer(image: 'node:8') {
          echo 'remove package-lock.json'
          sh 'rm -f package-lock.json'

          echo 'Installing dependencies'
          sh 'npm install'

          echo 'Building'
          sh 'npm run build'
        }

        echo 'Leaving Container'

        echo 'Compressing Artifacts'
        // Creates an XZ compressed archive
        sh "tar cJfv proximax-chain-explorer-${env.GIT_BRANCH}.tar.xz dist"
      }

      post {
        failure {
          slackSend channel: '#devops',
            color: 'bad',
            message: "Branch *${env.GIT_BRANCH}* build of *${currentBuild.fullDisplayName}* FAILED :scream:"
        }
      }
    }

    stage('Archive Artifact') {
      steps {
        echo 'Archiving Artifact'
        archiveArtifacts "proximax-chain-explorer-${env.GIT_BRANCH}.tar.xz"
      }

      post {
        success {
          slackSend channel: '#devops',
            color: 'good',
            message:  "Branch *${env.GIT_BRANCH}* build of *${currentBuild.fullDisplayName}* completed successfully :100:\nArtifact stored in S3"
        }

        failure {
          slackSend channel: '#devops',
            color: 'bad',
            message: "Branch *${env.GIT_BRANCH}* of *${currentBuild.fullDisplayName}* FAILED :scream:"
        }
      }
    }

    stage("Deploy to Staging") {
      when {
        branch 'master'
      }
      steps {
        echo 'Copy staging config file'
        sh 'cp ci/env/staging-config.json dist/config/config.json'

        echo 'Deploying to Staging'

        echo 'Managing S3'
        withAWS(credentials: 'jenkins-ecr', region: 'ap-southeast-2') {
          echo 'Deleting old files'
          s3Delete bucket: 'bcstagingexplorer.xpxsirius.io', path: './'

          echo 'Uploading new files'
          s3Upload bucket: 'bcstagingexplorer.xpxsirius.io', acl: 'PublicRead', file: 'dist/', sseAlgorithm: 'AES256'
        }

        echo 'Managing CloudFront'
        withAWS(credentials: 'jenkins-ecr') {
          echo 'Invalidating CloudFront'
          cfInvalidate distribution: 'E373B3Y0NEN1OB', paths: ['/*']
        }
      }

      post {
        success {
          slackSend channel: '#devops',
            color: 'good',
            message: "Branch *${env.GIT_BRANCH}* STAGING deployment of *${currentBuild.fullDisplayName}* completed successfully :100:\nAvailable at http://bctestnetexplorer.xpxsirius.io"
        }

        failure {
          slackSend channel: '#devops',
            color: 'bad',
            message: "Branch *${env.GIT_BRANCH}* STAGING deployment of *${currentBuild.fullDisplayName}* FAILED :scream:"
        }
      }
    }

    stage('Promotion to Testnet') {
      when {
        tag 'v*'
      }
      steps {
        slackSend channel: '#devops',
             color: 'bad',
             message: "*${currentBuild.fullDisplayName}* is awaiting user input confirmation for testnet deployment"
        script {
          timeout(time: 1, unit: 'HOURS') {
          env.DEPLOY_TO_TESTNET = input message: "User Input Required",
            parameters: [choice(name: 'Deploy to Testnet', choices: 'no\nyes', description: 'Choose yes if you want to deploy to Testnet')]
          }
        }
      }
    }

    stage('Deploy to Testnet') {
      when {
        environment name: 'DEPLOY_TO_TESTNET', value: 'yes'
      }
      steps {
        echo 'Copy testnet config file'
        sh 'cp ci/env/testnet-config.json dist/config/config.json'

        echo 'Deploying to Testnet'

        echo 'Managing S3'
        withAWS(credentials: 'jenkins-ecr', region: 'ap-southeast-2') {
          echo 'Deleting old files'
          s3Delete bucket: 'bctestnetexplorer.xpxsirius.io', path: './'

          echo 'Uploading new files'
          s3Upload bucket: 'bctestnetexplorer.xpxsirius.io', acl: 'PublicRead', file: 'dist/', sseAlgorithm: 'AES256'
        }

        echo 'Managing CloudFront'
        withAWS(credentials: 'jenkins-ecr') {
          echo 'Invalidating CloudFront'
          cfInvalidate distribution: 'E1RZY6CIY8D6XA', paths: ['/*']
        }
      }

      post {
        success {
          slackSend channel: '#devops',
            color: 'good',
            message: "Branch *${env.GIT_BRANCH}* TESTNET deployment of *${currentBuild.fullDisplayName}* completed successfully :100:\nAvailable at http://bctestnetexplorer.xpxsirius.io"
        }

        failure {
          slackSend channel: '#devops',
            color: 'bad',
            message: "Branch *${env.GIT_BRANCH}* TESTNET deployment of *${currentBuild.fullDisplayName}* FAILED :scream:"
        }
      }
    }

    stage('Promotion to Mainnet') {
      when {
        tag 'v*'
      }
      steps {
        slackSend channel: '#devops',
             color: 'bad',
             message: "*${currentBuild.fullDisplayName}* is awaiting user input confirmation for mainnet deployment"
        script {
          timeout(time: 1, unit: 'HOURS') {
          env.DEPLOY_TO_MAINNET = input message: "User Input Required",
            parameters: [choice(name: 'Deploy to Mainnet', choices: 'no\nyes', description: 'Choose yes if you want to deploy to Mainnet')]
          }
        }
      }
    }

    stage('Deploy to Mainnet') {
      when {
        environment name: 'DEPLOY_TO_MAINNET', value: 'yes'
      }
      steps {
        echo 'Copy testnet config file'
        sh 'cp ci/env/mainnet-config.json dist/config/config.json'

        echo 'Deploying to Mainnet'

        echo 'Managing S3'
        withAWS(credentials: 'jenkins-ecr', region: 'ap-southeast-2') {
          echo 'Deleting old files'
          s3Delete bucket: 'explorer.xpxsirius.io', path: './'

          echo 'Uploading new files'
          s3Upload bucket: 'explorer.xpxsirius.io', acl: 'PublicRead', file: 'dist/', sseAlgorithm: 'AES256'
        }

        echo 'Managing CloudFront'
        withAWS(credentials: 'jenkins-ecr') {
          echo 'Invalidating CloudFront'
          cfInvalidate distribution: 'E3EW93L9PWUY18', paths: ['/*']
        }
      }

      post {
        success {
          slackSend channel: '#devops',
            color: 'good',
            message: "Branch *${env.GIT_BRANCH}* MAINNET deployment of *${currentBuild.fullDisplayName}* completed successfully :100:\nAvailable at http://explorer.xpxsirius.io"
        }

        failure {
          slackSend channel: '#devops',
            color: 'bad',
            message: "Branch *${env.GIT_BRANCH}* MAINNET deployment of *${currentBuild.fullDisplayName}* FAILED :scream:"
        }
      }
    }
  }
}
